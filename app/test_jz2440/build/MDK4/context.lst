


ARM Macro Assembler    Page 1 


    1 00000000         ;/*
    2 00000000         ; * File      : context_rvds.S
    3 00000000         ; * This file is part of RT-Thread RTOS
    4 00000000         ; * COPYRIGHT (C) 2006, RT-Thread Development Team
    5 00000000         ; *
    6 00000000         ; * The license and distribution terms for this file may
                        be
    7 00000000         ; * found in the file LICENSE in this distribution or at
                       
    8 00000000         ; * http://www.rt-thread.org/license/LICENSE
    9 00000000         ; *
   10 00000000         ; * Change Logs:
   11 00000000         ; * Date           Author       Notes
   12 00000000         ; * 2009-01-20     Bernard      first version
   13 00000000         ; */
   14 00000000         
   15 00000000 000000C0 
                       NOINT   EQU              0xc0        ; disable interrupt
                                                             in psr
   16 00000000         
   17 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   18 00000000                 ARM
   19 00000000                 REQUIRE8
   20 00000000                 PRESERVE8
   21 00000000         
   22 00000000         ;/*
   23 00000000         ; * rt_base_t rt_hw_interrupt_disable();
   24 00000000         ; */
   25 00000000         rt_hw_interrupt_disable
                               PROC
   26 00000000                 EXPORT           rt_hw_interrupt_disable
   27 00000000 E10F0000        MRS              r0, cpsr
   28 00000004 E38010C0        ORR              r1, r0, #NOINT
   29 00000008 E121F001        MSR              cpsr_c, r1
   30 0000000C E12FFF1E        BX               lr
   31 00000010                 ENDP
   32 00000010         
   33 00000010         ;/*
   34 00000010         ; * void rt_hw_interrupt_enable(rt_base_t level);
   35 00000010         ; */
   36 00000010         rt_hw_interrupt_enable
                               PROC
   37 00000010                 EXPORT           rt_hw_interrupt_enable
   38 00000010 E121F000        MSR              cpsr_c, r0
   39 00000014 E12FFF1E        BX               lr
   40 00000018                 ENDP
   41 00000018         
   42 00000018         ;/*
   43 00000018         ; * void rt_hw_context_switch(rt_uint32 from, rt_uint32 
                       to);
   44 00000018         ; * r0 --> from
   45 00000018         ; * r1 --> to
   46 00000018         ; */
   47 00000018         rt_hw_context_switch
                               PROC
   48 00000018                 EXPORT           rt_hw_context_switch
   49 00000018 E92D4000        STMFD            sp!, {lr}   ; push pc (lr shoul
                                                            d be pushed in plac



ARM Macro Assembler    Page 2 


                                                            e of PC)
   50 0000001C E92D5FFF        STMFD            sp!, {r0-r12, lr} ; push lr & r
                                                            egister file
   51 00000020         
   52 00000020 E10F4000        MRS              r4, cpsr
   53 00000024 E92D0010        STMFD            sp!, {r4}   ; push cpsr
   54 00000028 E14F4000        MRS              r4, spsr
   55 0000002C E92D0010        STMFD            sp!, {r4}   ; push spsr
   56 00000030         
   57 00000030 E580D000        STR              sp, [r0]    ; store sp in preem
                                                            pted tasks TCB
   58 00000034 E591D000        LDR              sp, [r1]    ; get new task stac
                                                            k pointer
   59 00000038         
   60 00000038 E8BD0010        LDMFD            sp!, {r4}   ; pop new task spsr
                                                            
   61 0000003C E16FF004        MSR              spsr_cxsf, r4
   62 00000040 E8BD0010        LDMFD            sp!, {r4}   ; pop new task cpsr
                                                            
   63 00000044 E16FF004        MSR              spsr_cxsf, r4
   64 00000048         
   65 00000048 E8FDDFFF        LDMFD            sp!, {r0-r12, lr, pc}^ ; pop ne
                                                            w task r0-r12, lr &
                                                             pc
   66 0000004C                 ENDP
   67 0000004C         
   68 0000004C         ;/*
   69 0000004C         ; * void rt_hw_context_switch_to(rt_uint32 to);
   70 0000004C         ; * r0 --> to
   71 0000004C         ; */
   72 0000004C         rt_hw_context_switch_to
                               PROC
   73 0000004C                 EXPORT           rt_hw_context_switch_to
   74 0000004C E590D000        LDR              sp, [r0]    ; get new task stac
                                                            k pointer
   75 00000050         
   76 00000050 E8BD0010        LDMFD            sp!, {r4}   ; pop new task spsr
                                                            
   77 00000054 E16FF004        MSR              spsr_cxsf, r4
   78 00000058 E8BD0010        LDMFD            sp!, {r4}   ; pop new task cpsr
                                                            
   79 0000005C E12FF004        MSR              cpsr_cxsf, r4
   80 00000060         
   81 00000060 E8BDDFFF        LDMFD            sp!, {r0-r12, lr, pc} ; pop new
                                                             task r0-r12, lr & 
                                                            pc
   82 00000064                 ENDP
   83 00000064         
   84 00000064         ;/*
   85 00000064         ; * void rt_hw_context_switch_interrupt(rt_uint32 from, 
                       rt_uint32 to);
   86 00000064         ; */
   87 00000064                 IMPORT           rt_thread_switch_interrupt_flag
   88 00000064                 IMPORT           rt_interrupt_from_thread
   89 00000064                 IMPORT           rt_interrupt_to_thread
   90 00000064         
   91 00000064         rt_hw_context_switch_interrupt
                               PROC
   92 00000064                 EXPORT           rt_hw_context_switch_interrupt



ARM Macro Assembler    Page 3 


   93 00000064 E59F2024        LDR              r2, =rt_thread_switch_interrupt
_flag
   94 00000068 E5923000        LDR              r3, [r2]
   95 0000006C E3530001        CMP              r3, #1
   96 00000070 0A000003        BEQ              _reswitch
   97 00000074 E3A03001        MOV              r3, #1      ; set rt_thread_swi
                                                            tch_interrupt_flag 
                                                            to 1
   98 00000078 E5823000        STR              r3, [r2]
   99 0000007C E59F2010        LDR              r2, =rt_interrupt_from_thread ;
                                                             set rt_interrupt_f
                                                            rom_thread
  100 00000080 E5820000        STR              r0, [r2]
  101 00000084         _reswitch
  102 00000084 E59F200C        LDR              r2, =rt_interrupt_to_thread ; s
                                                            et rt_interrupt_to_
                                                            thread
  103 00000088 E5821000        STR              r1, [r2]
  104 0000008C E12FFF1E        BX               lr
  105 00000090                 ENDP
  106 00000090         
  107 00000090                 END
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=ARM920T --apcs=interwork --depend=.\output\c
ontext.d -o.\output\context.o -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Includ
e -ID:\Keil\ARM\Inc\Samsung --list=.\context.lst ..\..\context.S



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 17 in file ..\..\context.S
   Uses
      None
Comment: .text unused
_reswitch 00000084

Symbol: _reswitch
   Definitions
      At line 101 in file ..\..\context.S
   Uses
      At line 96 in file ..\..\context.S
Comment: _reswitch used once
rt_hw_context_switch 00000018

Symbol: rt_hw_context_switch
   Definitions
      At line 47 in file ..\..\context.S
   Uses
      At line 48 in file ..\..\context.S
Comment: rt_hw_context_switch used once
rt_hw_context_switch_interrupt 00000064

Symbol: rt_hw_context_switch_interrupt
   Definitions
      At line 91 in file ..\..\context.S
   Uses
      At line 92 in file ..\..\context.S
Comment: rt_hw_context_switch_interrupt used once
rt_hw_context_switch_to 0000004C

Symbol: rt_hw_context_switch_to
   Definitions
      At line 72 in file ..\..\context.S
   Uses
      At line 73 in file ..\..\context.S
Comment: rt_hw_context_switch_to used once
rt_hw_interrupt_disable 00000000

Symbol: rt_hw_interrupt_disable
   Definitions
      At line 25 in file ..\..\context.S
   Uses
      At line 26 in file ..\..\context.S
Comment: rt_hw_interrupt_disable used once
rt_hw_interrupt_enable 00000010

Symbol: rt_hw_interrupt_enable
   Definitions
      At line 36 in file ..\..\context.S
   Uses
      At line 37 in file ..\..\context.S
Comment: rt_hw_interrupt_enable used once
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NOINT 000000C0

Symbol: NOINT
   Definitions
      At line 15 in file ..\..\context.S
   Uses
      At line 28 in file ..\..\context.S
Comment: NOINT used once
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

rt_interrupt_from_thread 00000000

Symbol: rt_interrupt_from_thread
   Definitions
      At line 88 in file ..\..\context.S
   Uses
      At line 99 in file ..\..\context.S
Comment: rt_interrupt_from_thread used once
rt_interrupt_to_thread 00000000

Symbol: rt_interrupt_to_thread
   Definitions
      At line 89 in file ..\..\context.S
   Uses
      At line 102 in file ..\..\context.S
Comment: rt_interrupt_to_thread used once
rt_thread_switch_interrupt_flag 00000000

Symbol: rt_thread_switch_interrupt_flag
   Definitions
      At line 87 in file ..\..\context.S
   Uses
      At line 93 in file ..\..\context.S
Comment: rt_thread_switch_interrupt_flag used once
3 symbols
343 symbols in table
